pipeline ArrestCrimeDataPipeline {

    CrimedataFeedExtractor
        -> CrimedataTextFileInterpreter
        -> CrimedataCSVInterpreter
        -> CrimeDataTableInterpreter
        -> CrimedataLoader;
    
    block CrimedataTextFileInterpreter oftype TextFileInterpreter {    }

    block CrimedataCSVInterpreter oftype CSVInterpreter {
	    delimiter: ",";
		enclosing: '"';
    }
	

    block CrimedataFeedExtractor oftype HttpExtractor {
		url: "https://data.lacity.org/api/views/2nrs-mtv8/rows.csv?accessType=DOWNLOAD";
    }

	//Changing feedextracter because of too much time taking to export the data.

    //block CrimedataFeedExtractor oftype LocalFileExtractor {
	//	filePath: "Crime_Data_from_2020_to_Present.csv";
	//}


	//Taking default text datatype for all the columns because of JV interpreter taking too much time to export the data.

    block CrimeDataTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [

        "DR_NO" oftype integer,
		"Date Rptd" oftype text,
		"DATE OCC" oftype text,
		"TIME OCC" oftype integer,
		"AREA" oftype integer,
		"AREA NAME" oftype text,
		"Rpt Dist No" oftype integer,
		"Part 1-2" oftype integer,
		"Crm Cd" oftype integer,
		"Crm Cd Desc" oftype text,
		"Mocodes" oftype text,
		"Vict Age" oftype valid_age_check,
		"Vict Sex" oftype text,
		"Vict Descent" oftype text,
		"Premis Cd" oftype text,
		"Premis Desc" oftype text,
		"Weapon Used Cd" oftype text,
		"Weapon Desc" oftype text,
		"Status" oftype text,
		"Status Desc" oftype text,
		"Crm Cd 1" oftype text,
		"Crm Cd 2" oftype text,
		"Crm Cd 3" oftype text,
		"Crm Cd 4" oftype text,
		"LOCATION" oftype text,
		"Cross Street" oftype text,
		"LAT" oftype decimal,
		"LON" oftype decimal
        ];
    }



    block CrimedataLoader oftype SQLiteLoader {
        table: "crimedata";
        file: "./data/crimedata.sqlite";
    }


	ArrestdataFeedExtractor
			-> ArrestdataTextFileInterpreter
			-> ArrestdataCSVInterpreter
			-> ArrestdataTableInterpreter
			-> ArrestdataLoader;
		
		block ArrestdataTextFileInterpreter oftype TextFileInterpreter {    }

		block ArrestdataCSVInterpreter oftype CSVInterpreter {
			delimiter: ",";
			enclosing: '"';

		}
		

		block ArrestdataFeedExtractor oftype HttpExtractor {
			url: "https://data.lacity.org/api/views/amvf-fr72/rows.csv?accessType=DOWNLOAD";
		}

		//Changing feedextracter because of too much time taking to export the data.

		//block ArrestdataFeedExtractor oftype LocalFileExtractor {
		//	filePath: "Arrest_Data_from_2020_to_Present.csv";
		//}


		//Taking default text datatype for all the columns because of JV interpreter taking too much time to export the data.

		block ArrestdataTableInterpreter oftype TableInterpreter {
			header: true;
			columns: [

			"Report ID" oftype integer,
			"Report Type" oftype text,
			"Arrest Date" oftype text,
			"Time" oftype text,
			"Area ID" oftype integer,
			"Area Name" oftype text,
			"Reporting District" oftype integer,
			"Age" oftype valid_age_check,
			"Sex Code" oftype allowed_Sex_Type,
			"Descent Code" oftype text,
			"Charge Group Code" oftype text,
			"Charge Group Description" oftype text,
			"Arrest Type Code" oftype text,
			"Charge" oftype text,
			"Charge Description" oftype text,
			"Disposition Description" oftype text,
			"Address" oftype text,
			"Cross Street" oftype text,
			"LAT" oftype decimal,
			"LON" oftype decimal,
			"Location" oftype text,
			"Booking Date" oftype text,
			"Booking Time" oftype text,
			"Booking Location" oftype text,
			"Booking Location Code" oftype text
			];
		}


		block ArrestdataLoader oftype SQLiteLoader {
			table: "arrestdata";
			file: "./data/arrestdata.sqlite";
		}
		
		
	valuetype valid_age_check oftype integer {
	  // only check if age is positive or not
	  constraints: [
		OnlyPositiveAge,
	  ];
	}
	
	constraint OnlyPositiveAge oftype RangeConstraint{
		lowerBound: -1;
		lowerBoundInclusive: false;
	}
	
	valuetype allowed_Sex_Type oftype text {
	  // Check valid sex type
	  constraints: [
		valid_Sex_Check,
	  ];
	}
	
	constraint valid_Sex_Check oftype AllowlistConstraint {
		allowlist: ["F", "M",];
	}



}